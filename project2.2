// Exmaple of using the MQTT library for ESP32 
// Library by Joël Gähwiler
// https://github.com/256dpi/arduino-mqtt
// Modified by Arnan Sipitakiat


#include <WiFi.h>
#include <MQTT.h>

const char ssid[] = "Libra";
const char pass[] = "1122334455";
const char mqtt_broker[]="test.mosquitto.org";
const char mqtt_topic[]="group226/command";
const char mqtt_topic2[]="group226/button";
const char mqtt_client_id[]="clientId-DJ6GdjBtxI"; // must change this string to a unique value
int MQTT_PORT=1883;

int counter=0;

#define Button 32
#define LED 22

int buttonState = HIGH;
int lastButtonState = HIGH;

WiFiClient net;
MQTTClient client;

unsigned long lastMillis = 0;

void connect() {
  Serial.print("checking wifi...");
  while (WiFi.status() != WL_CONNECTED) {
    Serial.print(".");
    delay(1000);
  }

  Serial.print("\nconnecting...");
  while (!client.connect(mqtt_client_id)) {  
    Serial.print(".");
    delay(1000);
  }

  Serial.println("\nconnected!");

  client.subscribe(mqtt_topic);
}

void messageReceived(String &topic, String &payload) {
  if (topic == mqtt_topic) {
    if (payload == "on") {
      digitalWrite(LED, HIGH);
      Serial.println("LED turned ON");
    } else if (payload == "off") {
      digitalWrite(LED, LOW);
      Serial.println("LED turned OFF");
    }
  }
}

void setup() {
  Serial.begin(9600);
  WiFi.begin(ssid, pass);

  // Note: Local domain names (e.g. "Computer.local" on OSX) are not supported
  // by Arduino. You need to set the IP address directly.
  client.begin(mqtt_broker, MQTT_PORT, net);
  client.onMessage(messageReceived);
  pinMode(LED, OUTPUT);
  pinMode(Button, INPUT_PULLUP);
  connect();
}

void loop() {
  client.loop();
  delay(10); 

  if (!client.connected()) {
    connect();
  }


buttonState = digitalRead(Button);
  if (buttonState != lastButtonState) {
    if (buttonState == LOW) {
      client.publish(mqtt_topic2, "Button Pressed");
      Serial.println("Button Pressed");
    } else {
      client.publish(mqtt_topic2, "Button Released");
      Serial.println("Button Released");
    }
    lastButtonState = buttonState;
  }


}
