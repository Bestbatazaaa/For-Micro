#include <WiFi.h>
#include <MQTT.h>
#include <LCD_I2C.h>
#include "RTClib.h"

//CLOCK------------------------
RTC_DS1307 rtc;
double n = 0.0;
double p = 0.0;

//LCD--------------------------
LCD_I2C lcd(0x27, 16, 2);

//I2C--------------------------
#include <Adafruit_I2CDevice.h>

#define PCF8574_Address 0x20

Adafruit_I2CDevice i2c_dev = Adafruit_I2CDevice(PCF8574_Address);
uint8_t buffer[32];
uint8_t bitConfig = 0b00000000; // P0-P7 config bits
//I2C--------------------------


const char ssid[] = "Please";
const char pass[] = "Best1234";

const char mqtt_broker[]="test.mosquitto.org";
const char mqtt_topic[]="Best/command";
const char mqtt_client_id[]="clientId-jlxlVIt1zj"; // must change this string to a unique value
int MQTT_PORT=1883;

bool motor_active = false; // Tracks if the motor should move
bool motor_direction = false; // `false` for one direction, `true` for the other

int step_number = 0;

//int counter=0;

#define LED 22
#define BUTTON 14


WiFiClient net;
MQTTClient client;

unsigned long lastMillis = 0;

void connect() {
  Serial.print("checking wifi...");
  while (WiFi.status() != WL_CONNECTED) {
    Serial.print(".");
    delay(1000);
  }

  Serial.print("\nconnecting...");
  while (!client.connect(mqtt_client_id)) {  
    Serial.print(".");
    delay(1000);
  }

  Serial.println("\nconnected!");

  client.subscribe(mqtt_topic);
  // client.unsubscribe("/hello");
}

void messageReceived(String &topic, String &payload) {
  if (topic == mqtt_topic) {
    if (payload == "left") {
      motor_active = true;
      motor_direction = false; // Set direction (false = forward, for example)
    } else if (payload == "off") {
      motor_active = false;
    } else if (payload == "right"){
      motor_active = true;
      motor_direction = true;
    }
  }
}

void setup() {
  Serial.begin(9600);
  WiFi.begin(ssid, pass);

  // Note: Local domain names (e.g. "Computer.local" on OSX) are not supported
  // by Arduino. You need to set the IP address directly.
  client.begin(mqtt_broker, MQTT_PORT, net);
  client.onMessage(messageReceived);
  
  connect();
  //I2C--------------------------------------------
  Serial.println("I2C address detection test");
  if (!i2c_dev.begin()) {
    Serial.print("Did not find device at 0x");
    Serial.println(i2c_dev.address(), HEX);
    while (1);
  }
  Serial.print("Device found on address 0x");
  Serial.println(i2c_dev.address(), HEX);

  buffer[0] = 0b00000000;
  i2c_dev.write(buffer,1);
  //I2C--------------------------------------------
  //LCD--------------------------------------------
  lcd.begin();
  lcd.backlight();
  //LCD--------------------------------------------
  //CLOCK------------------------------------------
  #ifndef ESP8266
  while (!Serial); // wait for serial port to connect. Needed for native USB
  #endif

  if (! rtc.begin()) {
    Serial.println("Couldn't find RTC");
    Serial.flush();
    while (1) delay(10);
  }

  if (! rtc.isrunning()) {
    Serial.println("RTC is NOT running, let's set the time!");

    rtc.adjust(DateTime(F(__DATE__), F(__TIME__)));

  }
//CLOCK--------------------------------------------
}

void loop()
 {
  if (motor_active) {
  lcd.clear();
  n = n+1.0;
  OneStep(motor_direction); // Step in the set direction
  delay(2);                 // Adjust delay for speed
  } else {
    if(n != 0){
      p = n/500.0; 
    }
      lcd.print("work time : ");
      lcd.print(p);
      lcd.print(" s");
      delay(50);
      lcd.clear();
      n = 0;
  }
  client.loop();
  delay(0);  // <- fixes some issues with WiFi stability

  if (!client.connected()) {
    connect();
  }


}

void OneStep(bool dir) {
  if (dir) {
    switch (step_number) {
      case 0:
       buffer[0] = 0b00000001;
       i2c_dev.write(buffer,1);
        break;
      case 1:
       buffer[0] = 0b00000010;
       i2c_dev.write(buffer,1);
        break;
      case 2:
       buffer[0] = 0b00000100;
       i2c_dev.write(buffer,1);
        break;
      case 3:
       buffer[0] = 0b00001000;
       i2c_dev.write(buffer,1);
        break;
    }
  } else {
    switch (step_number) {
      case 0:
       buffer[0] = 0b00001000;
       i2c_dev.write(buffer,1);
        break;
      case 1:
       buffer[0] = 0b00000100;
       i2c_dev.write(buffer,1);
        break;
      case 2:
       buffer[0] = 0b00000010;
       i2c_dev.write(buffer,1);
        break;
      case 3:
       buffer[0] = 0b00000001;
       i2c_dev.write(buffer,1);
        break;
    }
  }
  step_number++;
  if (step_number > 3) {
    step_number = 0;
  }
}
